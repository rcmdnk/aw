#!/usr/bin/env bash

instance_list="aws ec2 describe-instances --query \"Reservations[*].Instances[*].{Id:InstanceId,Ip:PrivateIpAddress,Name:Tags[?Key=='Name']|[0].Value,Status:State.Name,Type:InstanceType}\""

_get_instance_list () {
  cmd="$instance_list --output text"
  if [ -n "$ec2_name_filter" ];then
    cmd="$cmd |grep $ec2_name_filter"
  fi
  if [ -n "$ec2_status_filter" ];then
    cmd="$cmd |grep $ec2_status_filter"
  fi
  eval $cmd
}

_select () {
  input="$@"
  tool=""
  for t in $(echo ${selection_tool:-peco,fzy,fzf,sentaku}|tr , ' ');do
    if type "$t" >& /dev/null ;then
      tool=$t
    fi
  done
  if [[ "$tool" = "sentaku" ]];then
    tool="sentaku -s line"
  fi
  if [ -n "$tool" ];then
    selected=$(echo "${input}"|$tool)
  else
    orig_ifs=$IFS
    IFS=$'\n'
    input=($(echo "$input"))
    IFS=$orig_ifs
    select value in "${input[@]}";do
      selected=$value
      echo
      break
    done
  fi
  echo "$selected"
}

_select_instances () {
  if [ $# -gt 0 ];then
    grep_var=""
    for v in "$@";do
      grep_var="$grep_var -e $v"
    done
    _get_instance_list |grep $grep_var
  else
    _select "$(_get_instance_list)"|grep -v "^$"
  fi
}

help() {
  echo "$HELP"
}

start () {
  ec2_status_filter="stopped"
  instances="$(_select_instances "$@"|awk '{print $1}')"
  if [ -z "$instances" ];then
    exit
  fi
  aws ec2 start-instances --instance-ids $instances
}

stop () {
  ec2_status_filter="running"
  instances="$(_select_instances "$@"|awk '{print $1}')"
  if [ -z "$instances" ];then
    exit
  fi
  aws ec2 stop-instances --instance-ids $instances
}

terminate () {
  instances="$(_select_instances "$@"|awk '{print $1}')"
  if [ -z "$instances" ];then
    exit
  fi
  aws ec2 terminate-instances --instance-ids $instances
}

ls () {
  printf "%20s%15s%30s%10s%15s\n" Id Ip Name Status Type
  echo ------------------------------------------------------------------------------------------
  while read -r id ip name status type;do
    printf "%20s%15s%30s%10s%15s\n" $id $ip $name $status $type
  done < <(_get_instance_list)
}

list () {
  ls
}

ssh () {
  ec2_status_filter="running"
  instances="$(_select_instances "$@"|awk '{print $2}')"
  if [ -z "$instances" ];then
    exit
  fi
  if [ $(echo "$instances"|wc -l|awk '{print $1}') != 1 ];then
    echo "More than 1 instances were selected"
    echo "$instances"
    exit 1
  fi
  ssh_option=""
  if [ -n "$ssh_key" ];then
    ssh_option="$ssh_option -i $ssh_key"
  fi
  if [ -n "$ssh_user" ];then
    instances="$ssh_user@$instances"
  fi
  command ssh $ssh_option $instances
}

subcommands=$(set | grep -v "^_" | grep " () " | cut -d' ' -f1)
HELP="Usage: $0 <subcommand> [-f <ec_name_filter>] [-k <ssh_key>] [-u <ssh_user>] [-h] [arg0 [arg1...]]

Subcommands:
$subcommands

"

if [ $# -eq 0 ];then
  echo "$HELP"
  exit
fi

config=~/.config/aw/config
if [ -f "$config" ];then
  while read -r line;do
    line=$(echo $line|cut -d "#" -f1)
    line=$(echo "$line")
    if [ -z "$line" ];then
      continue
    fi
    key_var=($(echo "$line"|tr = ' '|awk '{print $1" "$2}'))
    eval "${key_var[0]}=${key_var[1]}"
  done < "$config"
fi
subcommand=$1
shift

while getopts f:k:u:h OPT;do
  ((OPTNUM++))
  case $OPT in
    "f" ) ec2_name_filter=$OPTARG ;;
    "k" ) ssh_key=$OPTARG ;;
    "u" ) ssh_user=$OPTARG ;;
    "h" ) echo "$HELP"; exit ;;
    * ) echo "unknown option: $OPT" 1>&2;echo "$HELP" 1>&2; exit 1;;
  esac
done
shift $((OPTIND - 1))

$subcommand "$@"

