#!/usr/bin/env bash

__version="v0.0.52"
__date="17/Apr/2024"
__config_dir="${XDG_CONFIG_HOME:-$HOME}/.config/ec2"
__config="$__config_dir/config"
__job_list="${__config_dir}/job_list"
__type_list_file="$__config_dir/type_list"
__submit_sedi_lock="${__config_dir}/submit_sedi.lock"
__submit_sedi_lock_fd="200"
__submit_launch_lock="${__config_dir}/submit_launch.lock"
__submit_launch_lock_fd="201"
__exit_at_fail=1
__type_list_file_term=7
__instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"
__obj_name=(instance image template type)
__get_list_func=(_get_instance_list _get_image_list _get_template_list _get_type_list)
__enum_instance=0
__enum_image=1
__enum_template=2
__enum_type=3
__list=()
__ids=()

__cmd=$(basename "$0")

__opt_spot="--instance-market-options '{ \"MarketType\": \"spot\", \"SpotOptions\": {\"SpotInstanceType\": \"persistent\", \"InstanceInterruptionBehavior\" : \"stop\"} }'"

_read_config () {
  local line
  local key
  local var
  if [ -f "$__config" ];then
    while read -r line || [ -n "${line}" ];do
      line="$(echo "$line"|cut -d '#' -f1)"
      line="${line#"${line%%[![:space:]]*}"}"
      line="${line%"${line##*[![:space:]]}"}"
      if [ -z "$line" ];then
        continue
      fi
      key=${line%%=*}
      var=${line#*=}
      eval "__${key}=${var}"
    done < "$__config"
  fi
}

__options_help="[-i <instance_id>] [-f <name_filter>] [-g <gpu_filter>] [-p <cpu_filter>] [-P <private_ip>] [-T <template_id>] [-N <no_template>] [-c <cli_input_json> ] [-C <cli_input_json_directory>] [-t <instance_type>] [-n <n_cpu_core>] [-H <n_thread>] [-S <spot_instance>] [-R <retry_non_spot> ] [-I <image_name>] [-j <image_name_filter>] [-k <ssh_key>] [-u <ssh_user>] [-m <mosh_server>] [-U <user_data>] [-r <running_only>] [-M <max_jobs>] [-s <selection_tool>] [-a <aws_profile>] [-d <all>] [-d <dry_run>] [-v <verbose>] [-h]"

_read_arg () {
  __positional=()
  while [ $OPTIND -le "$#" ];do
    if getopts i:f:g:p:P:T:N:c:C:t:n:H:S:R:I:j:k:u:m:U:r:M:s:a:A:d:v:h OPT;then
      case $OPT in
        i ) __instance_id=$OPTARG ;;
        f ) __name_filter=$OPTARG ;;
        g ) __gpu_filter=$OPTARG ;;
        p ) __cpu_filter=$OPTARG ;;
        P ) __private_ip=$OPTARG ;;
        T ) __template_id=$OPTARG ;;
        N ) __no_template=$OPTARG ;;
        c ) __cli_input_json=$OPTARG ;;
        C ) __cli_input_json_directory=$OPTARG ;;
        t ) __instance_type=$OPTARG ;;
        n ) __n_cpu_core=$OPTARG ;;
        H ) __n_thread=$OPTARG ;;
        S ) __spot_instance=$OPTARG ;;
        R ) __retry_non_spot=$OPTARG ;;
        I ) __image_name=$OPTARG ;;
        j ) __image_name_filter=$OPTARG ;;
        k ) __ssh_key=$OPTARG ;;
        u ) __ssh_user=$OPTARG ;;
        m ) __mosh_server=$OPTARG ;;
        U ) __user_data=$OPTARG ;;
        r ) __running_only=$OPTARG ;;
        M ) __max_jobs=$OPTARG ;;
        s ) __selection_tool=$OPTARG ;;
        a ) __aws_profile=$OPTARG ;;
        A ) __all=$OPTARG ;;
        d ) __dry_run=$OPTARG ;;
        v ) __verbose=$OPTARG ;;
        h ) echo "$HELP"; exit ;;
        \? ) echo "$HELP" 1>&2; exit 1;;
      esac
    else
      __positional+=("${!OPTIND}")
      ((OPTIND++))
    fi
  done
}

_print_list () {
  # shellcheck disable=SC2206
  local headers=($1)
  local contents="$2"
  local n_cols=${#headers[@]}
  local width=()
  local i
  for ((i=0; i<n_cols; i++));do
    width[i]=${#headers[$i]}
  done
  local line
  while read -r line || [ -n "${line}" ];do
    # shellcheck disable=SC2206
    local columns=($line)
    for ((i=0; i<n_cols; i++));do
      if (( ${width[$i]} < ${#columns[$i]} ));then
        width[i]=${#columns[$i]}
      fi
    done
  done < <(echo -n "$contents")
  local format_header=""
  local format=""
  for ((i=0; i<n_cols; i++));do
    format_header="${format_header:+${format_header} }%-${width[$i]}s"
    format="${format:+${format} }%-${width[$i]}s"
  done
  # shellcheck disable=SC2059
  printf "$format_header\n" "${headers[@]}"
  # shellcheck disable=SC2059
  printf "%0$(printf "$format_header" "${headers[@]}"|wc -c|xargs)d\n"|tr 0 -
  while read -r line || [ -n "${line}" ];do
    # shellcheck disable=SC2059,SC2086
    printf "$format\n" $line
  done < <(echo -n "$contents")
}

_sedi () {
  (
    eval "exec $__submit_sedi_lock_fd>$__submit_sedi_lock"
    flock -x $__submit_sedi_lock_fd
    tmpfile=$(mktemp)
    sed "$1" "$2" > "$tmpfile"
    mv "$tmpfile" "$2"
  )
}

_tac () {
  echo "$@" | sed -n '1!G;h;$p'
}

_check_job_instances () {
  (
    eval "exec $__submit_sedi_lock_fd>$__submit_sedi_lock"
    flock -x $__submit_sedi_lock_fd
    if [ -n "$__max_jobs" ] && (( __max_jobs > 0 )) && (( $(grep -c -e running -e starting -e launching -e terminating "$__job_list") > __max_jobs ));then
      echo 1
    else
      echo 0
    fi
  )
}

_execute () {
  if [ "$__verbose" = "1" ];then
    echo "$*"
  fi
  __execute_result="$(eval "$*" 2>&1)"
  local ret=$?
  if [ $ret != 0 ];then
    # shellcheck disable=SC2154
    if echo "$__execute_result"|grep -q DryRunOperation;then
      return
    elif [ "$__exit_at_fail" != "0" ];then
      echo "$__execute_result" 1>&2
      exit $ret
    fi
  fi
  return $ret
}

_execute_aws () {
  local cmd="aws $* ${__aws_profile:+--profile ${__aws_profile}}"
  local subsubcmd
  subsubcmd=$(echo "$*"|cut -d ' ' -f2)

  while :;do
    __exit_at_fail=0 _execute "$cmd"
    local ret=$?
    if [ "$ret" -eq 0 ];then
      return 0
    fi
    if [ "$__exit_at_fail" = "0" ];then
      return $ret
    fi
    if [ "$ret" -eq 255 ];then
      aws sso login ${__aws_profile:+--profile ${__aws_profile}} 1>&2
      ret=$?
      if [ "$ret" -eq 0 ];then
        continue
      else
        echo "$__execute_result" 1>&2
        exit $ret
      fi
    fi
    if [ "$ret" -eq 254 ] && [ "$subsubcmd" = "run-instances" ] && [ "$__retry_non_spot" != "0" ];then
      if echo "$__execute_result"|grep -q "InsufficientInstanceCapacity";then
        echo "$__execute_result" 1>&2
        echo "Trying to launch non-spot instance" 1>&2
        cmd=${cmd//$__opt_spot/}
        continue
      fi
    fi
    echo "$__execute_result" 1>&2
    exit $ret
  done
}

_execute_ec2 () {
  _execute_aws ec2 "$*"
}

_select () {
  local input=("$@")
  local tool
  local t
  for t in $(echo "${__selection_tool:-sentaku,peco,fzy,fzf}"|tr , ' ');do
    if type "$t" >& /dev/null ;then
      tool=$t
      break
    fi
  done
  if [[ "$tool" = "sentaku" ]];then
    tool="sentaku -s line"
  fi
  if [ -n "$tool" ];then
    __selected=$(echo "${input[*]}"|$tool)
  else
    while IFS=$'\n' read -r line; do values+=("$line"); done < <(echo "${input[*]}")
    select value in "${values[@]}";do
      __selected=$value
      break
    done
  fi
}

_get_instance_list () {
  local ip_choice="PublicIpAddress"
  if [ "$__private_ip" = "1" ];then
    ip_choice="PrivateIpAddress"
  fi
  # shellcheck disable=SC2089
  local cmd="describe-instances --query \"Reservations[*].Instances[*].{a:Tags[?Key=='Name']|[0].Value,b:InstanceId,c:${ip_choice},d:State.Name,e:InstanceType,f:InstanceLifecycle}\" --output text $__instance_filter"
  if [ -n "${__ids[$__enum_instance]}" ];then
    local cmd="$cmd --instance-ids ${__ids[$__enum_instance]}"
  fi
  _execute_ec2 "$cmd"
  # Tab replace is needed, otherwise grep fails to filter
  __list[__enum_instance]="$(echo "$__execute_result"|tr "\t" " "|sort -k 1,3 -V)"
  if [ -n "$__name_filter" ];then
    __list[__enum_instance]="$(echo "${__list[$__enum_instance]}"|grep "$__name_filter")"
  fi
}

_get_image_list () {
  _execute_aws sts get-caller-identity --query "Account" --output text
  local account="$__execute_result"
  _execute_ec2 "describe-images --owners $account --query \"Images[*].{a:Name,b:ImageId,c:BlockDeviceMappings[0].Ebs.SnapshotId}\" --output text"
  # Sometime Name includes space prefix (?)
  __list[__enum_image]="$(echo "$__execute_result"|tr "\t" " "|awk '{print $1" "$2" "$3}'|sort -k 1 -V)"
  if [ -n "$__image_name_filter" ];then
    __list[__enum_image]="$(echo "${__list[$__enum_image]}"|grep "$__image_name_filter")"
  fi
}

_get_template_list () {
  _execute_ec2 "describe-launch-templates --query 'LaunchTemplates[*].{a:LaunchTemplateName,b:LaunchTemplateId}' --output text"
  __list[__enum_template]="$(echo "$__execute_result"|tr "\t" " "|sort -k 1 -V)"
}

_get_type_list () {
  if [ -f "$__type_list_file" ];then
    find "$__type_list_file" -mtime +"$__type_list_file_term" -exec command rm -f {} +
  fi
  if [ ! -f "$__type_list_file" ];then
    # shellcheck disable=SC2089
    local cmd="describe-instance-types --query \"InstanceTypes[*].{a:InstanceType,b:VCpuInfo.DefaultVCpus,c:VCpuInfo.DefaultCores,d:VCpuInfo.DefaultThreadsPerCore,e:MemoryInfo.SizeInMiB,f:ProcessorInfo.SupportedArchitectures[0],g:GpuInfo.Gpus[0].Name}\" --output text"
    if [ -n "$filters" ];then
      cmd="$cmd $filters"
    fi
    _execute_ec2 "$cmd"
    __list[__enum_type]="$(echo "$__execute_result"|tr "\t" " "|sort -V)"
    echo "${__list[$__enum_type]}" > "$__type_list_file"
  else
    __list[__enum_type]="$(cat "$__type_list_file")"
  fi

  if [ -n "$__cpu_filter" ];then
    __list[__enum_type]="$(echo "${__list[$__enum_type]}"|grep "$__cpu_filter")"
  fi
  if [ -n "$__gpu_filter" ];then
    if [ "$__gpu_filter" == 0 ];then
      __list[__enum_type]="$(echo "${__list[$__enum_type]}"|grep None)"
    elif [ "$__gpu_filter" == 1 ];then
      __list[__enum_type]="$(echo "${__list[$__enum_type]}"|grep -v None)"
    else
      __list[__enum_type]="$(echo "${__list[$__enum_type]}"|grep "$__gpu_filter")"
    fi
  fi
}

_select_objs () {
  local enum_obj=$1
  local only=$2
  ${__get_list_func[$enum_obj]}
  if [ -z "${__list[$enum_obj]}" ];then
    echo "No ${__obj_name[$enum_obj]} is available"
    exit 1
  fi
  _select "${__list[$enum_obj]}"
  if [ -z "$__selected" ];then
    echo "No ${__obj_name[$enum_obj]} was selected"
    exit 1
  fi
  if [ "$only" = "1" ];then
    if [ "$(echo "$__selected"|wc -l|xargs)" != 1 ];then
      echo "More than 1 ${__obj_name[$enum_obj]}s were selected"
      exit 1
    fi
  fi
  __list[enum_obj]="$__selected"
}

_get_ids () {
  local enum_obj=$1
  local only=$2
  if [ -z "${__ids[$enum_obj]}" ];then
    _select_objs "$enum_obj" "$only"
    __ids[enum_obj]="$(echo "${__list[$enum_obj]}"|awk '{print $2}'|tr '\n' ' ')"
  fi
  if [ -z "${__ids[$enum_obj]}" ];then
    exit
  fi
}

_get_id_name_list () {
  local enum_obj=$1
  __id_name_list=""
  if [ -n "${__list[$enum_obj]}" ];then
    for id in ${__ids[$enum_obj]};do
      __id_name_list="${__id_name_list:+${__id_name_list}, }${output:+${output}, }$(echo "${__list[$enum_obj]}"|grep "$id"|awk '{print $1}') ($id)"
    done
  else
    __id_name_list="$(echo "${__ids[$enum_obj]}"|sed -e 's/ /, /g' -e 's/, $//')"
  fi
}

_instance_check () {
  if [ "$__running_only" = 1 ];then
    __instance_filter="--filters Name=instance-state-name,Values=running"
  fi
  if [ -z "${__ids[$__enum_instance]}" ];then
    _select_objs $__enum_instance 1
  else
    _get_instance_list
  fi
  # shellcheck disable=SC2206
  local instance_info=(${__list[$__enum_instance]})
  __ids[__enum_instance]=${instance_info[1]}
  __instance_ip=${instance_info[2]}
  local status=${instance_info[3]}
  if [ "$status" == "stopped" ];then
    start
  fi
  if [ "$status" == "stopping" ];then
    echo "${__ids[$__enum_instance]} is stopping."
    exit 1
  fi
  __instance_filter="--filters Name=instance-state-name,Values=running"
  _get_instance_list
  status=$(echo "${__list[$__enum_instance]}"|awk '{print $4}')
  if [ "$status" == "running" ];then
    return
  fi
  while :;do
    _get_instance_list
    status=$(echo "${__list[$__enum_instance]}"|awk '{print $4}')
    if [ "$status" == "running" ];then
      sleep 5
      break
    fi
    sleep 1
  done
}

_get_name_number () {
  local name="$1"
  local names="$2"
  local suffix
  suffix=$(basename "${name//-//}")
  if [[ "$suffix" =~ ^[0-9]+$ ]];then
    name_base="${name%-"${suffix}"}"
  else
    name_base="${name}"
  fi
  suffix=1
  name="${name_base}-$(printf "%02d" "$suffix")"
  while :;do
    if ! echo "$names"|grep -q "^${name}$";then
      break
    fi
    ((suffix++))
    name="${name_base}-$(printf "%02d" "$suffix")"
  done
  echo "$name"
}

launch () {
  local name=""
  local instance_type=""
  if [ "$__no_template" != "1" ];then
    _get_ids $__enum_template 1
    _execute_ec2 "describe-launch-template-versions --launch-template-id ${__ids[$__enum_template]} --filters Name=is-default-version,Values=true --query \"LaunchTemplateVersions[0].{a:LaunchTemplateName,b:LaunchTemplateData.InstanceType,c:LaunchTemplateData.TagSpecifications[0].Tags[?Key=='Name']|[0].Value}\" --output text"
    # shellcheck disable=SC2206
    local result=($__execute_result)
    local template_name="${result[0]}"
    instance_type="${result[1]}"
    name="${result[2]}"
    if [ -z "$name" ];then
      name="$template_name"
    fi
    local launch_template="--launch-template LaunchTemplateId=${__ids[$__enum_template]}"
  fi
  if [ -n "$__cli_input_json" ];then
    local cli_input_json="--cli-input-json $__cli_input_json"
    name="$(basename "${__cli_input_json%.json}")"
  elif [ -n "$__cli_input_json_directory" ];then
    _select "$(command ls "$__cli_input_json_directory")"
    if [ -n "$__selected" ];then
      local cli_input_json="--cli-input-json file://$__cli_input_json_directory/$__selected"
      name="$(basename "${__selected%.json}")"
    fi
  fi
  __instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"
  _get_instance_list
  local names
  names=$(echo "${__list[$__enum_instance]}"|awk '{print $1}')

  name=$(_get_name_number "$name" "$names")

  if [ "$__instance_type" == "select" ];then
    _select_objs $__enum_type 1
    __instance_type=$(echo "${__list[$__enum_type]}"|awk '{print $1}')
  fi
  if [ -n "${__instance_type}" ];then
    instance_type="${__instance_type}"
  fi
  if [ -n "${instance_type}" ];then
    local instance_type_opt="--instance-type ${instance_type}"
    local cpu_options
    if [ -n "$__n_cpu_core" ] || [ -n "$__n_thread" ];then
      if [ -z "$__n_cpu_core" ] || [ -z "$__n_thread" ];then
        _get_type_list
        read -r -a type_info <<< "${__list[$__enum_type]}"
        cpu_core=${__n_cpu_core:-${type_info[2]}}
        n_thread=${__n_thread:-${type_info[3]}}
      fi
      cpu_options="--cpu-options \"CoreCount=${cpu_core},ThreadsPerCore=${n_thread}\""
    fi
  fi
  local spot_instance
  if [ "$__spot_instance" = "1" ];then
    spot_instance="$__opt_spot"
  fi
  local ip_choice="PublicIpAddress"
  if [ "$__private_ip" = "1" ];then
    ip_choice="PrivateIpAddress"
  fi
  _execute_ec2 "run-instances ${__dry_run_mode} ${cpu_options} ${spot_instance} ${__user_data:+--user-data ${__user_data}} $launch_template $cli_input_json $instance_type_opt --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=$name}]' --query \"Instances[*].{a:Tags[?Key=='Name']|[0].Value,b:InstanceId,c:${ip_choice},d:InstanceType}\" --output text"
  if [ "$__dry_run" = "1" ];then
    local id="XXX"
    local ip="XXX"
  else
    # shellcheck disable=SC2206
    local result=(${__execute_result})
    name=${result[0]}
    local id=${result[1]}
    local ip=${result[2]}
    instance_type=${result[3]}
  fi
  local spot_instance_msg
  if [ "$__spot_instance" = "1" ];then
    spot_instance_msg=", Lifecycle=spot"
  fi
  echo "${__dry_run_mode:+Dry run: }A new instance was launched: Name=$name, Id=$id, ${ip_choice}=$ip, Type=${instance_type}${spot_instance_msg}"
}

start () {
  __instance_filter="--filters Name=instance-state-name,Values=stopped"
  _get_ids $__enum_instance
  _execute_ec2 "$__dry_run_mode start-instances --instance-ids ${__ids[$__enum_instance]}"
  _get_id_name_list $__enum_instance
  echo "${__dry_run_mode:+Dry run: }Started: $__id_name_list"
}

stop () {
  __instance_filter="--filters Name=instance-state-name,Values=running"
  _get_ids $__enum_instance
  _execute_ec2 "$__dry_run_mode stop-instances --instance-ids ${__ids[$__enum_instance]}"
  _get_id_name_list $__enum_instance
  echo "${__dry_run_mode:+Dry run: }Stopped: $__id_name_list"
}

terminate () {
  __instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"
  _get_ids ${__enum_instance}
  _execute_ec2 "describe-instances --instance-ids ${__ids[$__enum_instance]} --query \"Reservations[*].Instances[*].SpotInstanceRequestId\" --output text"
  local spot_instances="${__execute_result}"
  local spot_instance_msg
  if [ -n "${spot_instances}" ];then
    spot_instance_msg=""
    for spot_request in ${spot_instances};do
      if [ -n "${spot_request}" ];then
        _execute_ec2 "${__dry_run_mode} cancel-spot-instance-requests --spot-instance-request-ids ${spot_request}"
        spot_instance_msg="${spot_instance_msg:+${spot_instance_msg}, }$spot_request"
      fi
    done
    spot_instance_msg=", cancel Spot Instance Request: $spot_instance_msg"
  fi
  _execute_ec2 "${__dry_run_mode} terminate-instances --instance-ids ${__ids[$__enum_instance]}"
  _get_id_name_list ${__enum_instance}
  echo "${__dry_run_mode:+Dry run: }Terminated: ${__id_name_list}${spot_instance_msg}"
}

rm () {
  terminate
}

instances () {
  _get_instance_list
  local header="Name Id Ip Status Type Lifecycle"
  local contents=""
  local line
  while read -r line || [ -n "${line}" ];do
    # shellcheck disable=SC2206
    line=($line)
    local name=${line[0]}
    local id=${line[1]}
    local ip=${line[2]}
    local st=${line[3]}
    local ty=${line[4]}
    local sp=${line[5]}
    contents=${contents}"$name $id $ip $st $ty $sp"$'\n'
  done < <(echo "${__list[$__enum_instance]}")
  _print_list "$header" "$contents"
}

list () {
  instances
}

ls () {
  instances
}

ssh () {
  cmd="${1:-ssh}"
  _instance_check
  local ssh_option=""
  if [ -n "$__ssh_key" ];then
    ssh_option="$ssh_option -i $__ssh_key"
  fi
  local ip=$__instance_ip
  if [ -n "$__ssh_user" ];then
    ip="$__ssh_user@$ip"
  fi
  while :;do
    # shellcheck disable=SC2086
    command ssh $ssh_option $ip "sudo tail -n1 /var/log/cloud-init-output.log |grep 'Cloud-init.*finished at.*seconds$'" >/dev/null 2>&1
    ret=$?
    if [ $ret -eq 0 ];then
      break
    fi
    echo "Waiting for ready..."
    sleep 5
  done
  if [ "$cmd" = "mosh" ];then
    ssh_option=""
    if [ -n "$__ssh_key" ];then
      ssh_option="--ssh=ssh -i $__ssh_key"
    fi
    if [ -n "$__mosh_server" ];then
    ssh_option="$ssh_option --server=$__mosh_server"
    fi
  fi
  # shellcheck disable=SC2086
  command $cmd $ssh_option $ip $__execute_command
}

mosh () {
  ssh mosh
  _instance_check
}

scp () {
  _instance_check
  local ssh_option=""
  if [ -n "$__ssh_key" ];then
    ssh_option="$ssh_option -i $__ssh_key"
  fi
  local ip=$__instance_ip
  if [ -n "$__ssh_user" ];then
    ip="$__ssh_user@$ip"
  fi
  while :;do
    # shellcheck disable=SC2086
    command ssh $ssh_option $ip "exit"
    ret=$?
    if [ $ret -eq 0 ];then
      break
    fi
    echo "Waiting for ready..."
    sleep 5
  done
  # shellcheck disable=SC2086
  command scp $ssh_option $__file $ip:
}

_clear_job () {
  if [ -n "${__ids[$__enum_instance]}" ];then
    _sedi "s/${job_id}.*$/${job_id} ${instance_id} ${instance_ip} terminating/" "$__job_list"
    terminate
  fi
  _sedi "/^${job_id} /d" "$__job_list"
}

submit () {
  if ! type flock >/dev/null 2>&1;then
    echo "flock is required for 'submit'"
    echo "Install flock by Homebrew ('brew install flock' or anything)"
    exit 1
  fi

  local job_id
  job_id="$$ $(date +"%Y-%m-%d %H:%M:%S") $(basename "$__file")"

  trap "_clear_job;exit 1" HUP INT QUIT ABRT SEGV TERM

  echo "$job_id - - waiting" >> "$__job_list"

  while :;do
    if [ "$(_check_job_instances)" = 1 ];then
      sleep 5
    else
      break
    fi
  done

  _sedi "s/${job_id}.*$/${job_id} - - starting/" "$__job_list"
  output=$(
    eval "exec $__submit_launch_lock_fd>$__submit_launch_lock"
    flock -x $__submit_launch_lock_fd
    _sedi "s/${job_id}.*$/${job_id} - - launching/" "$__job_list"
    output=$(launch)
    ret=$?
    echo "$output"
    if [ $ret -ne 0 ];then
      echo "Failed to launch instance for job: $job_id"
      exit $ret
    fi
  )
  ret=$?
  if [ $ret -ne 0 ];then
    echo "$output" 1>&2
    _clear_job
    exit $ret
  fi
  local instance_id
  instance_id=$(echo "$output" |tr ',' $'\n'|grep Id|cut -d '=' -f2)
  local instance_ip
  instance_ip=$(echo "$output" |tr ',' $'\n'|grep PrivateIpAddress|cut -d '=' -f2)
  __ids[__enum_instance]="$instance_id"
  _sedi "s/${job_id}.*$/${job_id} ${instance_id} ${instance_ip} launching/" "$__job_list"

  __execute_command="exit"
  ssh
  _sedi "s/${job_id}.*$/${job_id} ${instance_id} ${instance_ip} running/" "$__job_list"
  _execute_ec2 "describe-instances --instance-ids ${instance_id} --query \"Reservations[*].Instances[*].InstanceType\" --output text"
  local instance_type
  instance_type="$__execute_result"
  echo "Running $__file at job_id=$job_id, insatnce_id=$instance_id, instance_ip=$instance_ip, instance_type=$instance_type"
  scp
  __execute_command="bash $(basename "$__file")"
  ssh
  echo "finishing job: $job_id"
  _execute_ec2 "describe-instances --instance-ids ${instance_id} --query \"Reservations[*].Instances[*].StateTransitionReason\" --output text"
  echo "Instance transition reason: $__execute_result"
  echo "Clear job: $job_id"
  _clear_job
  _execute_ec2 "describe-instances --instance-ids ${instance_id} --query \"Reservations[*].Instances[*].StateTransitionReason\" --output text"
  echo "Instance finish reason: $__execute_result"
}

jobs () {
  touch "$__job_list"
  _print_list "PID DATE TIME SCRIPT ID IP STATUS" "$(cat "$__job_list")"
}

delete_job () {
  if [ ! -f "$__job_list" ];then
    echo "No job"
    exit 0
  fi
  local job_list
  job_list=$(cat "$__job_list")
  if [ -z "$job_list" ];then
    echo "No job"
    exit 0
  fi

  local job jobs
  if [ -z "${__positional[0]}" ];then
    _select "$(cat "$__job_list")"
    jobs=$(_tac "$__selected")
  else
    for pid in "${__positional[@]}";do
      job=$(echo "$job_list"|grep "^$pid ")
      if [ -z "$job" ];then
        echo "No job for PID: $pid"
        continue
      fi
      if [ -n "$jobs" ];then
        jobs="$jobs"$'\n'"$job"
      else
        jobs="$job"
      fi
    done
  fi
  local pid date time script instance_id instance_ip status
  while read -r pid date time script instance_id instance_ip status; do
    echo "Deleting job: $pid $date $time $script $instance_id $instance_ip $status"
    _sedi "s/$pid $date ${time}.*$/${pid} ${date} ${time} ${script} ${instance_id} ${instance_ip} deleting/" "$__job_list"
    kill -kill "$pid"
    if [ "$instance_id" != "-" ];then
      __ids[__enum_instance]="$instance_id"
      __exit_at_fail=0 terminate
    fi
    _sedi "/$pid /d" "$__job_list"
  done < <(echo "$jobs")
}

images () {
  _get_image_list
  local header="Name ImageId SnapshotId"
  local contents=""
  while read -r line || [ -n "${line}" ];do
    name=$(echo "$line"|awk '{print $1}')
    id=$(echo "$line"|awk '{print $2}')
    snapshot=$(echo "$line"|awk '{print $3}')
    contents=${contents}"$name $id $snapshot"$'\n'
  done < <(echo "${__list[$__enum_image]}")
  _print_list "$header" "$contents"
}

new_image () {
  _get_ids $__enum_instance 1
  if [ -z "$__image_name" ];then
    _get_instance_list
    __image_name="$(echo "${__list[$__enum_instance]}"|tr '\t' ' '|grep "${__ids[$__enum_instance]}"|awk '{print $1}')"
  fi
  if [ -z "$__image_name" ];then
    echo "Set image_name by: ec2 -I <image_name> new_images"
    exit 1
  fi

  _get_image_list
  local image_names
  image_names="$(echo "${__list[$__enum_image]}"|awk '{print $1}')"

  __image_name=$(_get_name_number "$__image_name" "$image_names")

  _execute_ec2 "${__dry_run_mode} create-image  --instance-id ${__ids[$__enum_instance]} --name $__image_name"
  echo "${__dry_run_mode:+Dry run: }Created a new AMI $__image_name from ${__ids[$__enum_instance]}"
}

rm_image () {
  if [ -z "$__image_name" ];then
    _select_objs $__enum_image 1
    local id
    id=$(echo "${__list[$__enum_image]}"|awk '{print $2}')
    local snapshot
    snapshot=$(echo "${__list[$__enum_image]}"|awk '{print $3}')
  else
    _get_image_list
    while read -r line || [ -n "${line}" ];do
      local name
      name=$(echo "$line"|awk '{print $1}')
      if [ "$name" ==  "$__image_name" ];then
        local id
        id=$(echo "$line"|awk '{print $2}')
        local snapshot
        snapshot=$(echo "$line"|awk '{print $3}')
        break
      fi
    done < <(echo "${__list[$__enum_image]}")
    if [ -z "$id" ];then
      echo "$__image_name is not found"
      exit 1
    fi
  fi
  _execute_ec2 "deregister-image ${__dry_run_mode} --image-id $id"
  _execute_ec2 "delete-snapshot ${__dry_run_mode} --snapshot-id $snapshot"
  _get_id_name_list $__enum_image
  echo "${__dry_run_mode:+Dry run: }Deleted: AMI=$__id_name_list, Snapshot=$snapshot"
}

templates () {
  _get_template_list
  local header="Name Id"
  local contents=""
  local line
  while read -r line || [ -n "${line}" ];do
    # shellcheck disable=SC2206
    line=($line)
    name=${line[0]}
    id=${line[1]}
    contents=${contents}"$name $id"$'\n'
  done < <(echo "${__list[$__enum_template]}")
  _print_list "$header" "$contents"
}

new_template () {
  _get_ids $__enum_template 1
  _execute_ec2 "describe-launch-templates --launch-template-id ${__ids[$__enum_template]} --query 'LaunchTemplates[*].DefaultVersionNumber' --output text"
  local default_version="$__execute_result"
  _select_objs $__enum_image 1
  local ami
  ami=$(echo "${__list[$__enum_image]}"|awk '{print $2}')
  local snapshot
  snapshot=$(echo "${__list[$__enum_image]}"|awk '{print $3}')
  _execute_ec2 "create-launch-template-version ${__dry_run_mode} --launch-template-id ${__ids[$__enum_template]} --source-version $default_version --launch-template-data '{\"ImageId\":\"${ami}\"}' --query 'LaunchTemplateVersion.VersionNumber' --output text"
  local new_version=XXX
  if [ "${__dry_run}" != "1" ];then
    new_version="${__execute_result}"
    _execute_ec2 "modify-launch-template --launch-template-id ${__ids[$__enum_template]} --default-version $new_version"
  fi
  _get_id_name_list $__enum_template
  echo "${__dry_run_mode:+Dry run: }Created a new template version $new_version for $__id_name_list"
}

types () {
  _get_type_list
  local header="Type vCPU Core Thread Mem(GiB) Arch GPU"
  local contents=""
  local line
  while read -r line || [ -n "${line}" ];do
    # shellcheck disable=SC2206
    line=($line)
    ty=${line[0]}
    vcpu=${line[1]}
    core=${line[2]}
    thread=${line[3]}
    mem=$(echo "${line[4]}" / 1024 | command bc)
    arch=${line[5]}
    gpu=$(echo "${line[*]}"|cut -d' ' -f 7-|tr ' ' _)
    contents=${contents}"$ty $vcpu $core $thread $mem $arch $gpu"$'\n'
  done < <(echo "${__list[$__enum_type]}")
  _print_list "$header" "$contents"
}

pricing () {
  if [ "$__instance_type" == "select" ] || [ -z "$__instance_type" ];then
    _select_objs $__enum_type 0
    __instance_type=$(echo "${__list[$__enum_type]}"|awk '{print $1}')
  fi
  # shellcheck disable=SC2206
  local types=(${__instance_type//,/ })
  _execute_aws configure get region
  local region="${__execute_result}"
  echo "Type USD"
  local t
  for t in "${types[@]}";do
    _execute_aws pricing get-products \
      --region us-east-1 \
      --service-code AmazonEC2 \
      --filters \
                'Type=TERM_MATCH,Field=instanceType,Value='"${t}" \
                'Type=TERM_MATCH,Field=regionCode,Value='"${region}" \
                'Type=TERM_MATCH,Field=preInstalledSw,Value=NA' \
                'Type=TERM_MATCH,Field=operatingSystem,Value=Linux' \
                'Type=TERM_MATCH,Field=tenancy,Value=Shared' \
                'Type=TERM_MATCH,Field=capacitystatus,Value=UnusedCapacityReservation' \
      --output text \
      --query 'PriceList[0]'
    local usd
    usd=$(echo "${__execute_result#*USD\":\"}"|cut -d'"' -f 1)
    echo "${t} ${usd}"
  done
}

price () {
  pricing
}

commands () {
  echo "$__subcommands"
}

help () {
  echo "$HELP"
}

version () {
  echo "ec2 $__version $__date"
}

_read_config

__subcommands=$(set | grep -v "^_" | grep " () " | cut -d' ' -f1 | tr '\n' ' ')
HELP="Usage: $__cmd $__options_help <subcommand> [options]

Subcommands:
$__subcommands
"

if [ $# -eq 0 ];then
  echo "$HELP"
  exit
fi

_read_arg "$@"

if [ "$__all" = "1" ];then
  __name_filter=""
  __image_name_filter=""
fi

if [ "$__dry_run" = "1" ];then
  __dry_run_mode="--dry-run"
fi
__ids[__enum_instance]="$__instance_id"
__ids[__enum_template]="$__template_id"

__subcommand="${__positional[0]}"
__positional=("${__positional[@]:1:$((${#__positional[@]}))}")
if [ -z "$__subcommand" ];then
  echo "$HELP"
  exit 1
fi
if ! echo " $__subcommands "|grep -q " $__subcommand ";then
  echo "$__subcommand is unknown subcommand."
  echo ""
  echo "$HELP"
  exit 1
fi

if [ "$__subcommand" == "ssh" ];then
  __execute_command="${__positional[0]}"
fi

if [ "$__subcommand" = "scp" ] || [ "$__subcommand" = "submit" ];then
  __file="${__positional[0]}"
  if [ -z "$__file" ];then
    echo "Usage: $__cmd [options] $__subcommand <file>"
    exit 1
  fi
  if [ ! -f "$__file" ];then
    echo "$__file does not exist"
    exit 1
  fi
fi

$__subcommand
