#!/usr/bin/env bash

__config_dir="$HOME/.config/ec2"
__config="$__config_dir/config"
__instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"

_execute () {
  __execute_result="$(eval "$@" 2>&1)"
  local ret=$?
  if [ $ret != 0 ];then
    if echo "$__execute_result"|grep -q DryRunOperation;then
      echo Dry run: $*|sed 's/--dry-run //'
      return
    elif [ "$__exit_at_fail" != "0" ];then
      echo "$__execute_result" 1>&2
      exit $ret
    fi
  fi
  return $ret
}

_execute_aws () {
  local cmd="$* ${__aws_profile:+--profile ${__aws_profile}}"
  __exit_at_fail=0 _execute $cmd
  local ret=$?
  if [ "$ret" -ne 0 ];then
    if [ "$ret" -ne 255 ];then
      echo "$__execute_result" 1>&2
      exit $?
    fi
    aws sso login ${__aws_profile:+--profile ${__aws_profile}} 1>&2
    ret=$?
    if [ "$ret" -ne 0 ];then
      exit $?
    fi
    _execute $cmd
    ret=$?
  fi
  return $ret
}

_select () {
  local input=("$@")
  local tool
  local t
  for t in $(echo ${__selection_tool:-sentaku,peco,fzy,fzf}|tr , ' ');do
    if type "$t" >& /dev/null ;then
      tool=$t
      break
    fi
  done
  if [[ "$tool" = "sentaku" ]];then
    tool="sentaku -s line"
  fi
  if [ -n "$tool" ];then
    __selected=$(echo "${input[*]}"|$tool)
  else
    orig_ifs=$IFS
    IFS=$'\n'
    IFS=$orig_ifs
    select value in "${input[@]}";do
      __selected=$value
      break
    done
  fi
}

_print_list () {
  local header=($1)
  local contents="$2"
  local n_cols="$(echo ${header[@]}|wc -w)"
  local width=()
  local i
  for ((i=0; i<$n_cols; i++));do
    width[$i]=${#header[$i]}
  done
  local line
  local columns
  while read -r line || [ -n "${line}" ];do
    columns=($line)
    for ((i=0; i<$n_cols; i++));do
      if [ ${width[$i]} -lt ${#columns[$i]} ];then
        width[$i]=${#columns[$i]}
      fi
    done
  done < <(printf "$contents")
  local format_header=""
  local format=""
  for ((i=0; i<$n_cols; i++));do
    format_header="${format_header:+${format_header} }%${width[$i]}s"
    format="${format:+${format} }%-${width[$i]}s"
  done
  printf "$format_header\n" "${header[@]}"
  printf "%0$(echo $(printf "$format_header" "${header[@]}"|wc -c))s\n" ''|tr 0 -
  while read -r line || [ -n "${line}" ];do
    columns=($line)
    printf "$format\n" $line
  done < <(printf "$contents")
}

_get_instance_list () {
  local cmd="aws ec2 describe-instances --query \"Reservations[*].Instances[*].{a:Tags[?Key=='Name']|[0].Value,b:InstanceId,c:PrivateIpAddress,d:PublicIpAddress,e:State.Name,f:InstanceType}\" --output text $__instance_filter"
  if [ -n "$__instance_id" ];then
    local cmd="$cmd --instance-ids $__instance_id"
  fi
  _execute_aws $cmd
  if [ -n "$__name_filter" ];then
    __execute_result="$(echo "$__execute_result"|grep "$__name_filter")"
  fi
  __instance_list="$(echo "$__execute_result"|sort -k 1,3 -V)"
}

_get_image_list () {
  _execute_aws aws sts get-caller-identity --query "Account" --output text
  local account="$__execute_result"
  _execute_aws "aws ec2 describe-images --owners $account --query \"Images[*].{a:Name,b:ImageId,c:BlockDeviceMappings[0].Ebs.SnapshotId}\" --output text"
  # Sometime Name includes space prefix (?)
  __image_list="$(echo "$__execute_result"|awk '{print $1" "$2" "$3}'|sort -k 1 -V)"
}

_get_template_list () {
  _execute_aws "aws ec2 describe-launch-templates --query 'LaunchTemplates[*].{a:LaunchTemplateName,b:LaunchTemplateId}' --output text"
  __template_list="$(echo "$__execute_result"|sort -k 1 -V)"
}

_get_type_list () {
  local cmd="ec2 describe-instance-types --query \"InstanceTypes[*].{a:InstanceType,b:VCpuInfo.DefaultVCpus,c:MemoryInfo.SizeInMiB,d:GpuInfo.Gpus[0].Name}\" --output text"
  filters=""
  if [ -n "$__cpu_filter" ];then
    if [ -n "$filters" ];then
      filters="${filters},"
    fi
    filters="${filters}Name=processor-info.supported-architecture,Values=${__cpu_filter}"
  fi
  if [ -n "$filters" ];then
    cmd="$cmd $filters"
  fi
  _execute_aws $cmd
  __type_list="$(echo "$__execute_result"|sort -V)"

  if [ -n "$__gpu_filter" ];then
    if [ "$__gpu_filter" == 0 ];then
      __type_list="$(echo "${__type_list}"|grep None)"
    elif [ "$__gpu_filter" == 1 ];then
      __type_list="$(echo "${__type_list}"|grep -v None)"
    else
      __type_list="$(echo "${__type_list}"|grep $__gpu_filter)"
    fi
  fi
}

_select_instances () {
  _get_instance_list
  if [ -z "$__instance_list" ];then
    echo "No instance is available."
    exit 1
  fi
  _select "$__instance_list"
  __instance_list="$__selected"
}

_select_templates () {
  _get_template_list
  if [ -z "$__template_list" ];then
    echo "No template is available."
    exit 1
  fi
  _select "$__template_list"
  __template_list="$__selected"
}

_select_images () {
  _get_image_list
  if [ -z "$__image_list" ];then
    echo "No image is available."
    exit 1
  fi
  _select "$__image_list"
  __image_list="$__selected"
}

_get_instance_id () {
  if [ -z "$__instance_id" ];then
    _select_instances
    __instance_id="$(echo "$__instance_list"|awk '{print $2}')"
  fi
  if [ -z "$__instance_id" ];then
    exit
  fi
}

_get_template_id () {
  if [ -z "$__template_id" ];then
    _select_templates
    __template_id="$(echo "$__template_list"|awk '{print $2}')"
  fi
  if [ -z "$__template_id" ];then
    exit
  fi
}

_get_image_id () {
  if [ -z "$__image_id" ];then
    _select_images
    __image_id="$(echo "$__image_list"|awk '{print $2}')"
  fi
  if [ -z "$__image_id" ];then
    exit
  fi
}

_instance_check () {
  if [ "$__running_only" = 1 ];then
    __instance_filter="--filters Name=instance-state-name,Values=running"
  fi
  _select_instances
  if [ -z "$__instance_list" ];then
    exit
  fi
  if [ $(echo "$__instance_list"|wc -l|awk '{print $1}') != 1 ];then
    echo "More than 1 instances were selected"
    echo "$__instance_list"
    exit 1
  fi
  __instance_id=$(echo "$__instance_list"|awk '{print $2}')
  if [ "$__private_ip" = "1" ];then
    __instance_ip=$(echo "$__instance_list"|awk '{print $3}')
  else
    __instance_ip=$(echo "$__instance_list"|awk '{print $4}')
  fi
  local status=$(echo "$__instance_list"|awk '{print $5}')
  if [ "$status" == "stopped" ];then
    start
  fi
  if [ "$status" == "stopping" ];then
    echo "$__instance_id is stopping."
    exit 1
  fi
  echo "Waiting for ready..."
  __instance_filter="--filters Name=instance-state-name,Values=running"
  _get_instance_list
  status=$(echo "$__instance_list"|awk '{print $5}')
  if [ "$status" == "running" ];then
    return
  fi
  while :;do
    _get_instance_list
    status=$(echo "$__instance_list"|awk '{print $5}')
    if [ "$status" == "running" ];then
      sleep 5
      break
    fi
    sleep 1
  done
}

launch () {
  _get_template_id
  _execute_aws "aws ec2 describe-launch-template-versions --launch-template-id $__template_id --filters Name=is-default-version,Values=true --query \"LaunchTemplateVersions[*].LaunchTemplateData.TagSpecifications[*].Tags[?Key=='Name']|[0][0][0].Value\" --output text"
  local name="$__execute_result"
  if [ -z "$name" ];then
    name="my-instance-01"
  fi
  __instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"
  _get_instance_list
  local names=$(echo "$__instance_list"|awk '{print $1}')
  while :;do
    if ! echo "$names"|grep -q "^${name}$";then
      break
    fi
    local suffix=$(basename "${name//-//}")
    if [[ "$suffix" =~ ^[0-9]+$ ]];then
      local suffix_new=$(printf "%02d" $((suffix + 1)))
      name=${name%${suffix}}$suffix_new
    else
      name=${name}-01
    fi
  done
  if [ "$__instance_type" == "select" ];then
    _get_type_list
    _select "$__type_list"
   __instance_type=$(echo $__selected|awk '{print $1}')
  fi
  local instance_type=""
  if [ -n "$__instance_type" ];then
    local instance_type="--instance-type $__instance_type"
  fi
  echo launching $name...
  _execute_aws "aws ec2 run-instances ${__dry_run_mode} --launch-template LaunchTemplateId=$__template_id $instance_type --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=$name}]' --query \"Instances[*].{a:Tags[?Key=='Name']|[0].Value,b:InstanceId,c:PrivateIpAddress,d:PublicIpAddress,e:State.Name,f:InstanceType}\" --output text"
  if [ "$__dry_run" = "1" ];then
    return
  fi
  local result=(${__execute_result})
  if [ "$__private_ip" = "1" ];then
    local ip="PrivateIP=${result[2]}"
  else
    local ip="PublicIP=${result[3]}"
  fi
  echo "The new instance was launched: Name=${result[0]}, Id=${result[1]}, ${ip}, Type=${result[5]}"
}

start () {
  __instance_filter="--filters Name=instance-state-name,Values=stopped"
  _get_instance_id
  _execute_aws aws ec2 ${__dry_run_mode} start-instances --instance-ids $__instance_id
}

stop () {
  __instance_filter="--filters Name=instance-state-name,Values=running"
  _get_instance_id
  _execute_aws aws ec2 ${__dry_run_mode} stop-instances --instance-ids $__instance_id
}

terminate () {
  __instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"
  _get_instance_id
  _execute_aws aws ec2 ${__dry_run_mode} terminate-instances --instance-ids $__instance_id
  local output=""
  if [ -n "$__instance_list" ];then
    while read -r id || [ -n "${line}" ];do
      output="${output:+${output}, }$(echo "$__instance_list"|grep "$id"|awk '{print $1}') ($id)"
    done < <(echo "$__instance_id")
  else
      output="$__instance_id"
  fi
  echo "Terminated:" $output
}

rm () {
  terminate
}

list () {
  _get_instance_list
  local header="Name Id Ip Status Type"
  local contents=""
  local line
  while read -r line || [ -n "${line}" ];do
    line=($line)
    name=${line[0]}
    id=${line[1]}
    if [ "$__private_ip" = "1" ];then
      ip=${line[2]}
    else
      ip=${line[3]}
    fi
    st=${line[4]}
    ty=${line[5]}
    contents="${contents}$name $id $ip $st $ty\n"
  done < <(echo "$__instance_list")
  _print_list "$header" "$contents"
}

ls () {
  list
}

types () {
  _get_type_list
  local header="Type vCPU Mem(GiB) GPU"
  local contents=""
  local line
  while read -r line || [ -n "${line}" ];do
    line=($line)
    ty=${line[0]}
    vcpu=${line[1]}
    mem=$(echo "${line[2]}" / 1024 | command bc)
    gpu=$(echo ${line[*]}|cut -d' ' -f 4-|tr ' ' _)
    contents="${contents}$ty $vcpu $mem $gpu\n"
  done < <(echo "$__type_list")
  _print_list "$header" "$contents"
}

ssh () {
  _instance_check
  local ssh_option=""
  if [ -n "$__ssh_key" ];then
    ssh_option="$ssh_option -i $__ssh_key"
  fi
  local ip=$__instance_ip
  if [ -n "$__ssh_user" ];then
    ip="$__ssh_user@$ip"
  fi
  command ssh $ssh_option $ip
  while test $? -ne 0;do
    echo "Waiting for ready..."
    sleep 5
    command ssh $ssh_option $ip
  done
}

mosh () {
  _instance_check
  local mosh_option=""
  if [ -n "$__ssh_key" ];then
    mosh_option="--ssh=ssh -i $__ssh_key"
  fi
  local ip=$__instance_ip
  if [ -n "$__ssh_user" ];then
    ip="$__ssh_user@$ip"
  fi
  command mosh "$mosh_option" $ip
  while test $? -ne 0;do
    echo "Waiting for ready..."
    sleep 5
    command mosh "$mosh_option" $ip
  done
}

images () {
  _get_image_list
  local header="Name ImageId SnapshotId"
  local contents=""
  while read -r line || [ -n "${line}" ];do
    name=$(echo "$line"|awk '{print $1}')
    id=$(echo "$line"|awk '{print $2}')
    snapshot=$(echo "$line"|awk '{print $3}')
    contents="${contents}$name $id $snapshot\n"
  done < <(echo "$__image_list")
  _print_list "$header" "$contents"
}

new_image () {
  _get_instance_id
  if [ -z "$__image_name" ];then
    _get_instance_list
    __image_name="$(echo "$__instance_list"|grep "$__instance_id"|awk '{print $1}')"
    local suffix=$(basename "${__image_name//-//}")
    if [[ "$suffix" =~ ^[0-9]+$ ]];then
      local suffix_new=01
      __image_name=${__image_name%${suffix}}$suffix_new
    fi
  fi
  if [ -z "$__image_name" ];then
    echo "Set image_name by: ec2 -I <image_name> new_images"
    exit 1
  fi
  _get_image_list
  local image_names="$(echo "$__image_list"|awk '{print $1}')"
  while :;do
    if ! echo "$image_names"|grep -q ^"$_image_name"$;then
      break
    fi
    local suffix=$(basename "${__image_name//-//}")
    if [[ "$suffix" =~ ^[0-9]+$ ]];then
      local suffix_new=$(printf "%02d" $((suffix + 1)))
      __image_name=${__image_name%${suffix}}$suffix_new
    else
      __image_name=${__image_name}-01
    fi
  done
  _execute_aws aws ec2 ${__dry_run_mode} create-image  --instance-id "$__instance_id" --name "$__image_name"
  echo "Created the new AMI $__image_name from $__instance_id"
}

rm_image () {
  _get_image_list
  if [ -z "$__image_name" ];then
    _select "$__image_list"
    if [ -z "$__selected" ];then
      exit
    fi
    local id=$(echo "$__selected"|awk '{print $2}')
    local snapshot=$(echo "$__selected"|awk '{print $3}')
  else
    while read -r line || [ -n "${line}" ];do
      local name=$(echo "$line"|awk '{print $1}')
      local id=$(echo "$line"|awk '{print $2}')
      local snapshot=$(echo "$line"|awk '{print $3}')
      if [ "$name" ==  "$__image_name" ];then
        break
      fi
    done < <(echo "$__image_list")
    if [ -z "$id" ];then
      echo "$__image_name is not found"
      exit 1
    fi
  fi
  _execute_aws aws ec2 deregister-image ${__dry_run_mode} --image-id "$id"
  _execute_aws aws ec2 delete-snapshot ${__dry_run_mode} --snapshot-id "$snapshot"
}

templates () {
  _get_template_list
  local header="Name Id"
  local contents=""
  local line
  while read -r line || [ -n "${line}" ];do
    line=($line)
    name=${line[0]}
    id=${line[1]}
    contents="${contents}$name $id\n"
  done < <(echo "$__template_list")
  _print_list "$header" "$contents"
}

new_template () {
  _get_template_id
  _execute_aws "aws ec2 describe-launch-templates --launch-template-id $__template_id --query 'LaunchTemplates[*].DefaultVersionNumber' --output text"
  local default_version="$__execute_result"
  _get_image_list
  _select "$__image_list"
  local ami=$(echo "$__selected"|awk '{print $2}')
  local snapshot=$(echo "$__selected"|awk '{print $3}')
  _execute_aws "aws ec2 create-launch-template-version ${__dry_run_mode} --launch-template-id $__template_id --source-version $default_version --launch-template-data '{\"ImageId\":\"${ami}\"}' --query 'LaunchTemplateVersion.VersionNumber' --output text"
  if [ "${__dry_run}" = "1" ];then
    return
  fi
  local new_version="$__execute_result"
  _execute _aws "ec2 modify-launch-template --launch-template-id $__template_id --default-version $new_version"
  echo "Created the new template version $new_version for $__template_id"
}

help () {
  echo "$HELP"
}

subcommands=$(set | grep -v "^_" | grep " () " | cut -d' ' -f1)
HELP="Usage: $0 [-i <instance_id>] [-f <name_filter>] [-g <gpu_filter>] [-p <cpu_filter>] [-P <private_ip>] [-T <template_id>] [-t <instance_type>] [-I <image_name>] [-k <ssh_key>] [-u <ssh_user>] [-r <running_only>] [-s <selection_tool>] [-a <aws_profile>] [-d <dry_run>] [-h] <subcommand>

Subcommands:
$subcommands

"

if [ $# -eq 0 ];then
  echo "$HELP"
  exit
fi

if [ -f "$__config" ];then
  while read -r line || [ -n "${line}" ];do
    line=$(echo $line|cut -d "#" -f1)
    line=$(echo "$line")
    if [ -z "$line" ];then
      continue
    fi
    key=$(echo "$line"|cut -d'=' -f1)
    var=$(echo "$line"|cut -d'=' -f2)
    eval "__${key}=${var}"
  done < "$__config"
fi

while getopts i:f:g:p:P:T:t:I:k:u:r:s:a:d:h OPT;do
  case $OPT in
    "i" ) __instance_id=$OPTARG ;;
    "f" ) __name_filter=$OPTARG ;;
    "g" ) __gpu_filter=$OPTARG ;;
    "p" ) __cpu_filter=$OPTARG ;;
    "P" ) __private_ip=$OPTARG ;;
    "T" ) __template_id=$OPTARG ;;
    "t" ) __instance_type=$OPTARG ;;
    "I" ) __image_name=$OPTARG ;;
    "k" ) __ssh_key=$OPTARG ;;
    "u" ) __ssh_user=$OPTARG ;;
    "r" ) __running_only=$OPTARG ;;
    "s" ) __selection_tool=$OPTARG ;;
    "a" ) __aws_profile=$OPTARG ;;
    "d" ) __dry_run=$OPTARG ;;
    "h" ) echo "$HELP"; exit ;;
    * ) echo "unknown option: $OPT" 1>&2;echo "$HELP" 1>&2; exit 1;;
  esac
done
shift $((OPTIND - 1))

if [ "$__dry_run" = "1" ];then
  __dry_run_mode="--dry-run"
fi

subcommand=$1
shift
if [ -z "$subcommand" ];then
  echo "$HELP"
  exit 1
fi
if ! echo " $(echo $subcommands) "|grep -q " $subcommand ";then
  echo "$subcommand is unknown subcommand."
  echo ""
  echo "$HELP"
  exit 1
fi

$subcommand

