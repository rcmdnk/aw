#!/usr/bin/env bash

instance_list="aws ec2 describe-instances --query \"Reservations[*].Instances[*].{a:InstanceId,b:PrivateIpAddress,c:Tags[?Key=='Name']|[0].Value,d:State.Name,e:InstanceType}\" --output text"
type_list="aws ec2 describe-instance-types --query \"InstanceTypes[*].{a:InstanceType,b:VCpuInfo.DefaultVCpus,c:MemoryInfo.SizeInMiB,d:GpuInfo.Gpus[0].Name}\" --output text"

_select () {
  local input="$@"
  local tool=""
  for t in $(echo ${selection_tool:-peco,fzy,fzf,sentaku}|tr , ' ');do
    if type "$t" >& /dev/null ;then
      tool=$t
    fi
  done
  if [[ "$tool" = "sentaku" ]];then
    tool="sentaku -s line"
  fi
  if [ -n "$tool" ];then
    local selected=$(echo "${input}"|$tool)
  else
    orig_ifs=$IFS
    IFS=$'\n'
    input=($(echo "$input"))
    IFS=$orig_ifs
    select value in "${input[@]}";do
      local selected=$value
      break
    done
  fi
  echo "$selected"
}

_get_type_list () {
  local cmd="$type_list"
  if [ -n "$type_filter" ];then
    cmd="$cmd |grep $type_filter"
  fi
  if [ -n "$gpu_filter" ];then
    if [ "$gpu_filter" == 0 ];then
      cmd="$cmd |grep None"
    elif [ "$gpu_filter" == 1 ];then
      cmd="$cmd |grep -v None"
    else
      cmd="$cmd |grep $gpu_filter"
    fi
  fi
  eval $cmd|sort -V
}

_get_instance_list () {
  local cmd="$instance_list"
  if [ -n "$instance_id" ];then
    local cmd="$cmd --instance-ids $instance_id"
  else
    if [ -n "$name_filter" ];then
      cmd="$cmd |grep $name_filter"
    fi
    if [ -n "$status_filter" ];then
      cmd="$cmd |grep $status_filter"
    fi
  fi
  eval $cmd|sort -V
}

_select_instances () {
  if [ $# -gt 0 ];then
    local grep_var=""
    for v in "$@";do
      grep_var="$grep_var -e $v"
    done
    _get_instance_list |grep $grep_var
  else
    _select "$(_get_instance_list)"|grep -v "^$"
  fi
}

start () {
  if [ -z "$instance_id" ];then
    status_filter="stopped"
    instance_id="$(_select_instances "$@"|awk '{print $1}')"
    if [ -z "$instance_id" ];then
      exit
    fi
  fi
  aws ec2 start-instances --instance-ids $instance_id
}

stop () {
  if [ -z "$instance_id" ];then
    status_filter="running"
    instance_id="$(_select_instances "$@"|awk '{print $1}')"
    if [ -z "$instance_id" ];then
      exit
    fi
  fi
  aws ec2 stop-instances --instance-ids $instance_id
}

terminate () {
  if [ -z "$instance_id" ];then
    instance_id="$(_select_instances "$@"|awk '{print $1}')"
    if [ -z "$instance_id" ];then
      exit
    fi
  fi
  aws ec2 terminate-instances --instance-ids $instance_id
}

ls () {
  printf "%20s %15s %30s %20s %15s\n" Id Ip Name Status Type
  echo --------------------------------------------------------------------------------------------------------
  while read -r id ip name status type;do
    printf "%20s %15s %30s %20s %15s\n" $id $ip $name $status $type
  done < <(_get_instance_list)
}

list () {
  ls
}

types () {
  printf "%15s %5s %12s %20s\n" Type vCPU "Mem(GiB)" GPU
  echo ----------------------------------------------------
  while IFS= read -r line;do
    type=$(echo $line|awk '{print $1}')
    vcpu=$(echo $line|awk '{print $2}')
    mem=$(echo $line|awk '{print $3}')
    mem=$(echo "$mem" / 1024 | command bc)
    gpu=$(echo $line|awk '{x="";for(i=4;i<=NF;i++) x=x $i" "; print x}')
    printf "%15s %5s %12s %20s\n" "$type" "$vcpu" "$mem" "$gpu"
  done < <(_get_type_list)
}

_instance_check () {
  if [ "$running_only" = 1 ];then
    status_filter="running"
  fi
  local instances="$(_select_instances "$@")"
  if [ -z "$instances" ];then
    exit
  fi
  if [ $(echo "$instances"|wc -l|awk '{print $1}') != 1 ];then
    echo "More than 1 instances were selected"
    echo "$instances"
    exit 1
  fi
  instance_id=$(echo $instances|awk '{print $1}')
  local ip=$(echo $instances|awk '{print $2}')
  local status=$(echo $instances|awk '{print $4}')
  if [ "$status" == "stopped" ];then
    start
  fi
  while :;do
    status=$(_get_instance_list|awk '{print $4}')
    if [ "$status" == "running" ];then
      break
    fi
    sleep 1
  done
  echo $ip
}

ssh () {
  local ip=$(_instance_check "$@")
  local ssh_option=""
  if [ -n "$ssh_key" ];then
    ssh_option="$ssh_option -i $ssh_key"
  fi
  if [ -n "$ssh_user" ];then
    ip="$ssh_user@$ip"
  fi
  command ssh $ssh_option $ip
}

mosh () {
  local ip=$(_instance_check "$@")
  local mosh_option=""
  if [ -n "$ssh_key" ];then
    mosh_option="--ssh=ssh -i $ssh_key"
  fi
  if [ -n "$ssh_user" ];then
    ip="$ssh_user@$ip"
  fi
  command mosh "$mosh_option" $ip
}

help () {
  echo "$HELP"
}

subcommands=$(set | grep -v "^_" | grep " () " | cut -d' ' -f1)
HELP="Usage: $0 <subcommand> [-i <instance_id>] [-f <name_filter>] [-t <instance_type>] [-g <gpu_filter>] [-k <ssh_key>] [-u <ssh_user>] [-r <running_only>] [-h] [arg0 [arg1...]]

Subcommands:
$subcommands

"

if [ $# -eq 0 ];then
  echo "$HELP"
  exit
fi

config=~/.config/ec2/config
if [ -f "$config" ];then
  while read -r line;do
    line=$(echo $line|cut -d "#" -f1)
    line=$(echo "$line")
    if [ -z "$line" ];then
      continue
    fi
    key_var=($(echo "$line"|tr = ' '|awk '{print $1" "$2}'))
    eval "${key_var[0]}=${key_var[1]}"
  done < "$config"
fi
subcommand=$1
shift

while getopts i:f:t:g:k:u:r:h OPT;do
  ((OPTNUM++))
  case $OPT in
    "i" ) instance_id=$OPTARG ;;
    "f" ) name_filter=$OPTARG ;;
    "t" ) type_filter=$OPTARG ;;
    "g" ) gpu_filter=$OPTARG ;;
    "k" ) ssh_key=$OPTARG ;;
    "u" ) ssh_user=$OPTARG ;;
    "r" ) running_only=$OPTARG ;;
    "h" ) echo "$HELP"; exit ;;
    * ) echo "unknown option: $OPT" 1>&2;echo "$HELP" 1>&2; exit 1;;
  esac
done
shift $((OPTIND - 1))

$subcommand "$@"

