#!/usr/bin/env bash

__config_dir="$HOME/.config/ec2"
__config="$__config_dir/config"
__instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"

_execute () {
  local result
  __execute_result="$(eval "$@" 2>&1)"
  local ret=$?
  if [ $ret != 0 ];then
    echo "$__execute_result" 1>&2
    if echo "$__execute_result" |grep -q "Error loading SSO Token";then
      echo Try \'aws sso login\' 1>&2
    fi
    exit $ret
  fi
}

_execute_sort () {
  _execute "$@"
  __execute_result="$(echo "$__execute_result"|sort -V)"
}

_read () {
  if [ -f "$1" ];then
    while read -r line;do
      line=$(echo $line|cut -d "#" -f1)
      line=$(echo "$line")
      if [ -z "$line" ];then
        continue
      fi
      echo "$line"|tr '=' ' '|awk '{print $1" "$2}'
    done < "$1"
  fi
}

_select () {
  local input=("$@")
  local tool
  local t
  for t in $(echo ${__selection_tool:-sentaku,peco,fzy,fzf}|tr , ' ');do
    if type "$t" >& /dev/null ;then
      tool=$t
      break
    fi
  done
  if [[ "$tool" = "sentaku" ]];then
    tool="sentaku -s line"
  fi
  if [ -n "$tool" ];then
    __selected=$(echo "${input[*]}"|$tool)
  else
    orig_ifs=$IFS
    IFS=$'\n'
    IFS=$orig_ifs
    select value in "${input[@]}";do
      __selected=$value
      break
    done
  fi
}

_get_type_list () {
  local cmd="aws ec2 describe-instance-types --query \"InstanceTypes[*].{a:InstanceType,b:VCpuInfo.DefaultVCpus,c:MemoryInfo.SizeInMiB,d:GpuInfo.Gpus[0].Name}\" --output text"
  filters=""
  if [ -n "$__cpu_filter" ];then
    if [ -n "$filters" ];then
      filters="${filters},"
    fi
    filters="${filters}Name=processor-info.supported-architecture,Values=${__cpu_filter}"
  fi
  if [ -n "$filters" ];then
    cmd="$cmd $filters"
  fi
  _execute_sort $cmd

  if [ -n "$__gpu_filter" ];then
    if [ "$__gpu_filter" == 0 ];then
      cmd="$cmd |grep None"
    elif [ "$__gpu_filter" == 1 ];then
      cmd="$cmd |grep -v None"
    else
      cmd="$cmd |grep $__gpu_filter"
    fi
  fi
  __type_list="$__execute_result"
}

_get_instance_list () {
  local cmd="aws ec2 describe-instances --query \"Reservations[*].Instances[*].{a:InstanceId,b:PrivateIpAddress,c:Tags[?Key=='Name']|[0].Value,d:State.Name,e:InstanceType}\" --output text $__instance_filter"
  if [ -n "$__instance_id" ];then
    local cmd="$cmd --instance-ids $__instance_id"
  fi
  _execute_sort $cmd
  if [ -n "$__name_filter" ];then
    __execute_result="$(echo "$__execute_result"|grep "$__name_filter")"
  fi
  __instance_list="$__execute_result"
}

_select_instances () {
  _get_instance_list
  if [ -z "$__instance_list" ];then
    echo "No instance is available."
    exit 1
  fi
  _select "$__instance_list"
  __instance_list="$__selected"
}

_make_template () {
  if [ -z "$__template" ];then
    local templates
    templates=$(command ls "$__config_dir"|grep ".json$")
    if [ -z "$templates" ];then
      echo "No templates are available in $__config_dir"
      exit 1
    fi
    _select "$templates"
    __template="$__selected"
  fi
  if [ ! -f "$__config_dir/$__template" ];then
    echo "Template $__config_dir/$__template is not available."
    exit 1
  fi
  __template_json="$(cat "$__config_dir/$__template")"
  local name="$(echo "$__template_json"|jq ".TagSpecifications[].Tags[]|select(.Key == \"Name\")|.Value")"
  name=$(echo $name|tr -d "'"|tr -d '"')
  if [ -z "$name" ];then
    name="my-insatnce-01"
  else
    unset __instance_id
    unset __name_filter
    __instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"
    _get_instance_list
    local names=$(echo "$__instance_list"|awk '{print $3}')
    while :;do
      if ! echo "$names"|grep -q "^${name}$";then
        break
      fi
      local suffix=$(basename "${name//-//}")
      if [[ "$suffix" =~ ^[0-9]+$ ]];then
        local suffix_new=$(printf "%02d" $((suffix + 1)))
        name=${name%${suffix}}$suffix_new
      else
        name=${name}-01
      fi
    done
  fi
  __template_json="$(echo "$__template_json"|jq "(.TagSpecifications[].Tags[]|select(.Key == \"Name\").Value) |= \"$name\"")"
  if [ "$__instance_type" == select ];then
    _get_type_list
    _select "$__type_list"
   __instance_type=$(echo $__selected|awk '{print $1}')
  fi
  if [ -n "$__instance_type" ];then
    __template_json="$(echo "$__template_json"|jq ".InstanceType |= \"$__instance_type\"")"
  fi
  echo launching $name with template $__config_dir/$__template
}

launch () {
  _make_template
  tmpjson=$(mktemp)
  echo $tmpjson
  #trap "rm -rf $tmpjson" HUP INT QUIT ABRT SEGV TERM EXIT
  echo "$__template_json" > "$tmpjson"
  _execute aws ec2 run-instances --cli-input-json "file://$tmpjson"
}

start () {
  if [ -z "$__instance_id" ];then
    __instance_filter="--filters Name=instance-state-name,Values=stopped"
    _select_instances
    __instance_id=$(echo "$__instance_list"|awk '{print $1}')
    if [ -z "$__instance_id" ];then
      exit
    fi
  fi
  _execute aws ec2 start-instances --instance-ids $__instance_id
}

stop () {
  if [ -z "$__instance_id" ];then
    __instance_filter="--filters Name=instance-state-name,Values=running"
    _select_instances
    __instance_id="$(echo "$__instance_list"|awk '{print $1}')"
    if [ -z "$__instance_id" ];then
      exit
    fi
  fi
  _execute aws ec2 stop-instances --instance-ids $__instance_id
}

terminate () {
  if [ -z "$__instance_id" ];then
    __instance_filter="--filters Name=instance-state-name,Values=pending,running,stopping,stopped"
    _select_instances
    __instance_id="$(echo "$__instance_list"|awk '{print $1}')"
    if [ -z "$__instance_id" ];then
      exit
    fi
  fi
  _execute aws ec2 terminate-instances --instance-ids $__instance_id
}

ls () {
  _get_instance_list
  printf "%20s %15s %30s %20s %15s\n" Id Ip Name Status Type
  echo --------------------------------------------------------------------------------------------------------
  while read -r id ip name status type;do
    printf "%20s %15s %30s %20s %15s\n" $id $ip $name $status $type
  done < <(echo "$__instance_list")
}

list () {
  ls
}

types () {
  _get_type_list
  printf "%15s %5s %12s %20s\n" Type vCPU "Mem(GiB)" GPU
  echo -------------------------------------------------------
  while IFS= read -r line;do
    type=$(echo "$line"|awk '{print $1}')
    vcpu=$(echo "$line"|awk '{print $2}')
    mem=$(echo "$line"|awk '{print $3}')
    mem=$(echo "$mem" / 1024 | command bc)
    gpu=$(echo "$line"|awk '{x="";for(i=4;i<=NF;i++) x=x $i" "; print x}')
    printf "%15s %5s %12s %20s\n" "$type" "$vcpu" "$mem" "$gpu"
  done < <(echo "$__type_list")
}

_instance_check () {
  if [ "$__running_only" = 1 ];then
    __instance_filter="--filters Name=instance-state-name,Values=running"
  fi
  _select_instances
  if [ -z "$__instance_list" ];then
    exit
  fi
  if [ $(echo "$__instance_list"|wc -l|awk '{print $1}') != 1 ];then
    echo "More than 1 instances were selected"
    echo "$__instance_list"
    exit 1
  fi
  __instance_id=$(echo "$__instance_list"|awk '{print $1}')
  __instance_ip=$(echo "$__instance_list"|awk '{print $2}')
  local status=$(echo "$__instance_list"|awk '{print $4}')
  if [ "$status" == "stopped" ];then
    start
  fi
  if [ "$status" == "stopping" ];then
    echo "$__instance_id is stopping."
    exit 1
  fi
  echo "Waiting for ready..."
  __instance_filter="--filters Name=instance-state-name,Values=running"
  while :;do
    _get_instance_list
    status=$(echo "$__instance_list"|awk '{print $4}')
    if [ "$status" == "running" ];then
      break
    fi
    sleep 1
  done
}

ssh () {
  _instance_check
  local ssh_option=""
  if [ -n "$__ssh_key" ];then
    ssh_option="$ssh_option -i $__ssh_key"
  fi
  if [ -n "$__ssh_user" ];then
    ip="$__ssh_user@$ip"
  fi
  command ssh $ssh_option $__instance_ip
}

mosh () {
  _instance_check
  local mosh_option=""
  if [ -n "$__ssh_key" ];then
    mosh_option="--ssh=ssh -i $__ssh_key"
  fi
  if [ -n "$__ssh_user" ];then
    ip="$__ssh_user@$ip"
  fi
  echo mosh "$mosh_option" $__instance_ip
  command mosh "$mosh_option" $__instance_ip
}

template () {
  if [ -z "$__instance_id" ];then
    _select_instances
    __instance_id="$(echo "$__instance_list"|awk '{print $1}')"
  fi
  if [ -z "$__instance_id" ];then
    exit
  fi
  _execute "aws ec2 get-launch-template-data --instance-id $__instance_id | jq \".LaunchTemplateData|del (.CpuOptions, .NetworkInterfaces[].PrivateIpAddresses)\""
  echo "$__execute_result"
}

help () {
  echo "$HELP"
}

subcommands=$(set | grep -v "^_" | grep " () " | cut -d' ' -f1)
HELP="Usage: $0 <subcommand> [-i <instance_id>] [-f <name_filter>] [-g <gpu_filter>] [-p <cpu_filter>] [-T <template>] [-t <instance_type>] [-k <ssh_key>] [-u <ssh_user>] [-r <running_only>] [-s <selection_tool>] [-h] [arg0 [arg1...]]

Subcommands:
$subcommands

"

if [ $# -eq 0 ];then
  echo "$HELP"
  exit
fi

while read -r line;do
  key=$(echo "$line"|cut -d' ' -f1)
  var=$(echo "$line"|cut -d' ' -f2-)
  eval "__${key}=${var}"
done < <(_read "$__config")

while getopts i:f:g:p:T:t:k:u:r:s:h OPT;do
  case $OPT in
    "i" ) __instance_id=$OPTARG ;;
    "f" ) __name_filter=$OPTARG ;;
    "g" ) __gpu_filter=$OPTARG ;;
    "p" ) __cpu_filter=$OPTARG ;;
    "T" ) __template=$OPTARG ;;
    "t" ) __instance_type=$OPTARG ;;
    "k" ) __ssh_key=$OPTARG ;;
    "u" ) __ssh_user=$OPTARG ;;
    "r" ) __running_only=$OPTARG ;;
    "s" ) __selection_tool=$OPTARG ;;
    "h" ) echo "$HELP"; exit ;;
    * ) echo "unknown option: $OPT" 1>&2;echo "$HELP" 1>&2; exit 1;;
  esac
done
shift $((OPTIND - 1))

subcommand=$1
shift
if [ -z "$subcommand" ];then
  echo "$HELP"
  exit 1
fi
if ! echo " $(echo $subcommands) "|grep -q " $subcommand ";then
  echo "$subcommand is unknown subcommand."
  echo ""
  echo "$HELP"
  exit 1
fi

$subcommand

